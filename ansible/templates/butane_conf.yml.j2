variant: fcos
version: 1.4.0
systemd:
  units:
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true

    - name: fck8s-setup.service
      enabled: false
      contents: |-
        [Unit]
        Description=fck8s-setup: Fedora CoreOS Kuberentes Setup
        Wants=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/etc/fck8s_setup.sh
        Type=simple
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target

    - name: python-setup.service
      enabled: true
      contents: |-
        [Unit]
        Description=python-setup: Fedora CoreOS Python Setup
        Wants=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/etc/python_setup.sh
        Type=simple
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target
{% if groups['fck8s_controlPlane'][0] == node_item.name %}
    - name: k8shaproxy.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Cluster HAProxy
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=forking
        Restart=always
        TimeoutSec=600
        KillMode=process
        RemainAfterExit=yes
        ExecStartPre=/bin/bash -c '(while ! nc -z -v -w1 registry-1.docker.io 443 2>/dev/null; do echo "Waiting for network to come online..."; sleep 2; done); sleep 2; podman pull docker.io/library/haproxy:latest'
        ExecStart=podman run -dt --name k8shaproxy --sysctl net.ipv4.ip_unprivileged_port_start=0 -p 80/tcp -p 443/tcp -p 6443/tcp --network lanBridge -v /etc/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg --ip {{ cluster_load_balancer_ip }} docker.io/library/haproxy:latest
        ExecStop=podman stop -t 10 k8shaproxy
        ExecStopPost=podman rm k8shaproxy
        [Install]
        WantedBy=multi-user.target
{% endif %}
passwd:
  users:
    - name: core
      groups:
        - wheel
        - sudo
      ssh_authorized_keys:
{% for key in core_user_ssh_authorized_keys %}
        - {{ key }}
{% endfor %}
storage:
  files:
    - path: /etc/python_setup.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash

          set -e

          if [ ! -f "/var/.python-install-complete" ]; then
            sleep 10
            rpm-ostree install python libselinux-python3 nc --idempotent --allow-inactive
            touch /var/.python-install-complete
            systemctl reboot
          fi

    - path: /etc/fck8s_setup.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash

          set -e
          if [ ! -f "/var/.stage-one-complete" ]; then
            sleep 10
          fi

          DOWNLOAD_DIR=/var/bin
          CRICTL_VERSION="v1.23.0"
          CNI_VERSION="v1.0.1"
          K8S_VERSION="1.22"
          SERVICE_RELEASE_VERSION="v0.12.0"

          mkdir -p $DOWNLOAD_DIR
          mkdir -p /var/cni/bin
          mkdir -p /etc/systemd/system/kubelet.service.d
          mkdir -p /var/lib/kubelet
          mkdir -p /etc/kubernetes
          mkdir -p /var/libexec/kubernetes/kubelet-plugins/volume/exec/

          ## Download Crictl
          if [ ! -f "${DOWNLOAD_DIR}/crictl" ]; then
            curl -L "https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-Linux-amd64.tar.gz" | tar -C $DOWNLOAD_DIR -xz
          fi

          ### Download CNI
          #if [ ! -f "/var/cni/bin/host-local" ]; then
          #  curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-Linux-amd64-${CNI_VERSION}.tgz" | tar -C /var/cni/bin -xz
          #fi

          ## Download K8s binaries
          if [ ! -f "${DOWNLOAD_DIR}/kubeadm" ]; then
            cd $DOWNLOAD_DIR
            curl -L --remote-name-all https://dl.k8s.io/release/v${K8S_VERSION}.0/bin/linux/amd64/{kubeadm,kubelet,kubectl}
            chmod a+x {kubeadm,kubelet,kubectl}
          fi

          ## Setup SystemD Services
          if [ ! -f "/etc/systemd/system/kubelet.service" ]; then
            curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${SERVICE_RELEASE_VERSION}/cmd/kubepkg/templates/latest/rpm/kubelet/kubelet.service" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service
          fi

          if [ ! -f "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf" ]; then
            curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${SERVICE_RELEASE_VERSION}/cmd/kubepkg/templates/latest/rpm/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
          fi

          set +e
          systemctl daemon-reload
          if [ "$(systemctl is-enabled kubelet)" != "enabled" ]; then
            systemctl enable kubelet
          fi

          ## System Packages
          if [ ! -f "/var/.stage-one-complete" ]; then
            rpm-ostree ex module enable cri-o:$K8S_VERSION
            rpm-ostree install conntrack cri-o ethtool --idempotent --allow-inactive
            touch /var/.stage-one-complete
            systemctl reboot
          fi

    - path: /etc/profile.d/bindir.sh
      mode: 0644
      contents:
        inline: |
          export PATH="/var/bin:$PATH"

    - path: /etc/profile.d/systemd-pager.sh
      mode: 0644
      contents:
        inline: |
          # Tell systemd to not use a pager when printing information
          export SYSTEMD_PAGER=cat

    - path: /etc/sysctl.d/20-silence-audit.conf
      mode: 0644
      contents:
        inline: |
          # Raise console message logging level from DEBUG (7) to WARNING (4)
          # to hide audit messages from the interactive console
          kernel.printk=4

    - path: /etc/modules-load.d/crio.conf
      mode: 0644
      contents:
        inline: |
          overlay
          br_netfilter

    - path: /etc/sysctl.d/99-kubernetes-cri.conf
      mode: 0644
      contents:
        inline: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - path: /etc/hostname
      mode: 420
      overwrite: true
      contents:
        source: "data:,{{ node_item.name }}"

    - path: /etc/selinux/config
      mode: 420
      overwrite: true
      contents:
        inline: |
          SELINUX=permissive
          SELINUXTYPE=targeted

    - path: /etc/NetworkManager/system-connections/bridge0.nmconnection
      mode: 0600
      overwrite: true
      contents:
        inline: |
          [connection]
          id=bridge0
          type=bridge
          interface-name=bridge0
          [bridge]
          [ipv4]
          method=manual
          addresses={{ node_item.network.ip_address }}/{{ node_item.network.cidr_prefix }}
          gateway={{ node_item.network.gateway }}
          dns={{ cluster_node_network_static_dns_servers | join(';') }}
          dns-search={{ cluster_node_network_static_dns_search_domains | join(';') }}
          may-fail=false

    - path: /etc/NetworkManager/system-connections/bridge0-slave-enp1s0.nmconnection
      mode: 0600
      overwrite: true
      contents:
        inline: |
          [connection]
          id=bridge0-slave-enp1s0
          type=ethernet
          interface-name=enp1s0
          master=bridge0
          slave-type=bridge
          [bridge-port]

    - path: /etc/NetworkManager/conf.d/calico.conf
      mode: 0600
      overwrite: true
      contents:
        inline: |
          [keyfile]
          unmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:wireguard.cali

{% if groups['fck8s_controlPlane'][0] == node_item.name %}
    - path: /etc/haproxy.cfg
      mode: 0644
      overwrite: true
      contents:
        inline: |
          global
              log         127.0.0.1 local2
              maxconn     4000

              # turn on stats unix socket
              stats socket /var/lib/haproxy/stats

              # utilize system-wide crypto-policies
              #ssl-default-bind-ciphers PROFILE=SYSTEM
              #ssl-default-server-ciphers PROFILE=SYSTEM

          defaults
              mode                    tcp
              log                     global
              option                  tcplog
              option                  dontlognull
              option http-server-close
              option                  redispatch
              retries                 3
              timeout http-request    10s
              timeout queue           1m
              timeout connect         10s
              timeout client          1m
              timeout server          1m
              timeout http-keep-alive 10s
              timeout check           10s
              maxconn                 3000

          frontend api
              bind {{ cluster_load_balancer_ip }}:6443
              default_backend controlplaneapi

          frontend secure
              bind {{ cluster_load_balancer_ip }}:443
              default_backend secure

          frontend insecure
              bind {{ cluster_load_balancer_ip }}:80
              default_backend insecure

          backend controlplaneapi
              balance source
          {% for node in cluster_nodes %}{% if node.type == "controlPlane" %}
              server {{ node.name }} {{ node.network.ip_address }}:6443 check
          {% endif %}{% endfor %}

          backend secure
              balance source
          {% for node in cluster_nodes %}{% if node.type == "applicationNode" %}
              server {{ node.name }} {{ node.network.ip_address }}:443 check
          {% endif %}{% endfor %}

          backend insecure
              balance source
          {% for node in cluster_nodes %}{% if node.type == "applicationNode" %}
              server {{ node.name }} {{ node.network.ip_address }}:80 check
          {% endif %}{% endfor %}
          #END OF HAPROXY CONFIG
    - path: /etc/cni/net.d/69-lanBridge.conflist
      mode: 0644
      overwrite: true
      contents:
        inline: |
          {
            "cniVersion": "0.4.0",
            "name": "lanBridge",
            "plugins": [
              {
                "type": "bridge",
                "bridge": "bridge0",
                "ipam": {
                  "type": "host-local",
                  "ranges": [
                    [
                      {
                        "subnet": "{{ bridgeSubnet }}",
                        "rangeStart": "{{ bridgeRangeStart }}",
                        "rangeEnd": "{{ bridgeRangeEnd }}",
                        "gateway": "{{ bridgeGateway }}"
                      }
                    ]
                  ],
                  "routes": [
                    {"dst": "0.0.0.0/0"}
                  ]
                }
              },
              {
                "type": "portmap",
                "capabilities": {
                  "portMappings": true
                }
              },
              {
                "type": "firewall",
                "backend": ""
              },
              {
                "type": "tuning",
                "capabilities": {
                  "mac": true
                }
              }
            ]
          }
{% endif %}